// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDbLite.MVC.Models;

namespace MovieDbLiteMvc2.Migrations
{
    [DbContext(typeof(MovieDbLiteContext))]
    [Migration("20200321053311_SmallRenamesAndNewColumn")]
    partial class SmallRenamesAndNewColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieDbLite.MVC.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("AwardShowId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AwardShowId");

                    b.ToTable("Award");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.AwardShow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("AwardShow");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.FilmMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PreferredFullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FilmMember");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.FilmMemberAward", b =>
                {
                    b.Property<long>("FilmMemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("date");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("char(4)")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("FilmMemberId", "AwardId", "MovieId");

                    b.HasIndex("AwardId");

                    b.HasIndex("MovieId");

                    b.ToTable("FilmMemberAward");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.FilmRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FilmRole");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AverageUserRating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("DirectorFilmMemberId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<short?>("RestrictionRatingId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RestrictionRatingId");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieActor", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActorFilmMemberId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnName("CharacterName")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorFilmMemberId");

                    b.HasIndex("ActorFilmMemberId");

                    b.ToTable("MovieCastMember");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieFilmMember", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("FilmMemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("FilmRoleId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "FilmMemberId", "FilmRoleId");

                    b.HasIndex("FilmMemberId");

                    b.HasIndex("FilmRoleId");

                    b.ToTable("MovieCrewMember");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieGenre", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movie_Genre");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieUserReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieUserReview");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieUserReviewHelpful", b =>
                {
                    b.Property<long>("MovieUserReviewId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Helpful")
                        .HasColumnName("IsHelpful")
                        .HasColumnType("bit");

                    b.HasKey("MovieUserReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieUserReviewHelpful");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.RestrictionRating", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("RestrictionRating");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.Award", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.AwardShow", "AwardShow")
                        .WithMany("Award")
                        .HasForeignKey("AwardShowId")
                        .HasConstraintName("FK_Award_AwardShow")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.FilmMemberAward", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.Award", "Award")
                        .WithMany("FilmMemberAward")
                        .HasForeignKey("AwardId")
                        .HasConstraintName("FK_FilmMemberAward_Award")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.FilmMember", "FilmMember")
                        .WithMany("FilmMemberAward")
                        .HasForeignKey("FilmMemberId")
                        .HasConstraintName("FK_FilmMemberAward_FilmMember")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.Movie", "Movie")
                        .WithMany("FilmMemberAward")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_FilmMemberAward_Movie")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.Movie", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.Language", "Language")
                        .WithMany("Movie")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Movie_Language");

                    b.HasOne("MovieDbLite.MVC.Models.RestrictionRating", "RestrictionRating")
                        .WithMany("Movie")
                        .HasForeignKey("RestrictionRatingId")
                        .HasConstraintName("FK_Movie_RestrictionRating");
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieActor", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.FilmMember", "ActorFilmMember")
                        .WithMany("MovieActor")
                        .HasForeignKey("ActorFilmMemberId")
                        .HasConstraintName("FK_MovieCastMember_FilmMember")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.Movie", "Movie")
                        .WithMany("MovieActor")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_MovieCastMember_Movie")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieFilmMember", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.FilmMember", "FilmMember")
                        .WithMany("MovieFilmMember")
                        .HasForeignKey("FilmMemberId")
                        .HasConstraintName("FK_MovieCrewMember_FilmMember")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.FilmRole", "FilmRole")
                        .WithMany("MovieFilmMember")
                        .HasForeignKey("FilmRoleId")
                        .HasConstraintName("FK_MovieCrewMember_FilmRole")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.Movie", "Movie")
                        .WithMany("MovieFilmMember")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_MovieCrewMember_Movie")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieGenre", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.Genre", "Genre")
                        .WithMany("MovieGenre")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_Movie_Genre_Genre")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.Movie", "Movie")
                        .WithMany("MovieGenre")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_Movie_Genre_Movie")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieUserReview", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.Movie", "Movie")
                        .WithMany("MovieUserReview")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_MovieUserReview_Movie")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.User", "User")
                        .WithMany("MovieUserReview")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MovieUserReview_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieDbLite.MVC.Models.MovieUserReviewHelpful", b =>
                {
                    b.HasOne("MovieDbLite.MVC.Models.MovieUserReview", "MovieUserReview")
                        .WithMany("MovieUserReviewHelpful")
                        .HasForeignKey("MovieUserReviewId")
                        .HasConstraintName("FK_MovieUserReviewHelpful_MovieUserReview")
                        .IsRequired();

                    b.HasOne("MovieDbLite.MVC.Models.User", "User")
                        .WithMany("MovieUserReviewHelpful")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_MovieUserReviewHelpful_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
